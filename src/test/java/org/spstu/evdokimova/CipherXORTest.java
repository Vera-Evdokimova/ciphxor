package org.spstu.evdokimova;

import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TemporaryFolder;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;

public class CipherXORTest {
    @Rule
    public TemporaryFolder tmp = new TemporaryFolder();

    @Test
    public void enc() {
        try {
            File fl = tmp.newFile();
            Files.write(fl.toPath(), new byte[]{0x42, 0x75, 0x69, 0x6c, 0x64, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20,
                    0x6f, 0x77, 0x6e, 0x20, 0x64, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2c, 0x20, 0x6f, 0x72, 0x20, 0x73, 0x6f, 0x6d,
                    0x65, 0x6f, 0x6e, 0x65, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x68, 0x69, 0x72,
                    0x65, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x20, 0x74, 0x68, 0x65, 0x69, 0x72, 0x73});
            CommandLineOptions cmd = new CommandLineOptions(new String[]{"-c", "73756d6d6572", fl.getAbsolutePath()});
            new CipherXOR(cmd);
            Assert.assertArrayEquals(new byte[]{0x31, 0x0, 0x4, 0x1, 0x1, 0x52, 0xa, 0x1a, 0x18, 0x1f, 0x45, 0x1d, 0x4, 0x1b,
                            0x4d, 0x9, 0x17, 0x17, 0x12, 0x18, 0x1e, 0x41, 0x45, 0x1d, 0x1, 0x55, 0x1e, 0x2, 0x8, 0x17, 0x1c, 0x1b,
                            0x8, 0x4d, 0x0, 0x1e, 0x0, 0x10, 0x4d, 0x1a, 0xc, 0x1e, 0x1f, 0x55, 0x5, 0x4, 0x17, 0x17, 0x53, 0xc, 0x2,
                            0x18, 0x45, 0x6, 0x1c, 0x55, 0xf, 0x18, 0xc, 0x1e, 0x17, 0x55, 0x19, 0x5, 0x0, 0x1b, 0x1, 0x6},
                    Files.readAllBytes(new File(fl.getAbsolutePath() + ".xor").toPath()));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Test
    public void dec() {
        try {
            File fl = tmp.newFile();
            Files.write(fl.toPath(), new byte[]{0x31, 0x0, 0x4, 0x1, 0x1, 0x52, 0xa, 0x1a, 0x18, 0x1f, 0x45, 0x1d, 0x4, 0x1b,
                    0x4d, 0x9, 0x17, 0x17, 0x12, 0x18, 0x1e, 0x41, 0x45, 0x1d, 0x1, 0x55, 0x1e, 0x2, 0x8, 0x17, 0x1c, 0x1b,
                    0x8, 0x4d, 0x0, 0x1e, 0x0, 0x10, 0x4d, 0x1a, 0xc, 0x1e, 0x1f, 0x55, 0x5, 0x4, 0x17, 0x17, 0x53, 0xc, 0x2,
                    0x18, 0x45, 0x6, 0x1c, 0x55, 0xf, 0x18, 0xc, 0x1e, 0x17, 0x55, 0x19, 0x5, 0x0, 0x1b, 0x1, 0x6});
            CommandLineOptions cmd = new CommandLineOptions(new String[]{"-c", "73756d6d6572", fl.getAbsolutePath()});
            cmd.outputFilename = fl.getAbsolutePath().substring(0, fl.getAbsolutePath().lastIndexOf(File.separator)) + "out";
            new CipherXOR(cmd);
            Assert.assertArrayEquals(new byte[]{0x42, 0x75, 0x69, 0x6c, 0x64, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20,
                            0x6f, 0x77, 0x6e, 0x20, 0x64, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2c, 0x20, 0x6f, 0x72, 0x20, 0x73, 0x6f, 0x6d,
                            0x65, 0x6f, 0x6e, 0x65, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x68, 0x69, 0x72,
                            0x65, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x20, 0x74, 0x68, 0x65, 0x69, 0x72, 0x73},
                    Files.readAllBytes(new File(cmd.outputFilename).toPath()));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}